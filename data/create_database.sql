
DROP TABLE IF EXISTS "dessins", "artiste";

CREATE TABLE IF NOT EXISTS "artiste" (
  "id" SERIAL PRIMARY KEY,
  "nom" TEXT NOT NULL,
  "prenom" TEXT NOT NULL
);

CREATE TABLE IF NOT EXISTS "dessins" (
  "id" SERIAL PRIMARY KEY,
  "titre" TEXT NOT NULL,
  "reference" TEXT,
  "date_realisation" DATE,
  "format" TEXT NOT NULL,
  "signature" BOOLEAN NOT NULL,
  "img_url" TEXT,
  "artiste_id" INTEGER,
  FOREIGN KEY("artiste_id") REFERENCES "artiste"("id")
);

SET client_encoding TO 'UTF8';

INSERT INTO "artiste" ("nom", "prenom") 
VALUES 
('daniel', 'lefebvre');



INSERT INTO "dessins" ("titre", "reference", "date_realisation", "format", "signature", "img_url", "artiste_id") 
VALUES 
('Micket et yoda', NULL, NULL, '24x32', TRUE, 'public/img/Micket et yoda.jpg', 1);
('Journée de la gentillesse', 'Attentats Paris 13 Nov 2015', '2015-11-14', '24x32', TRUE, 'public/img/Journée de la gentillesse.jpg', 1);
('Républic', `etat d'urgence +cop21`, '2015-12-01', '21x29', TRUE, 'public/img/Républic.jpg', 1);
('Goodyear', 'procès goodyears avec condamnations 01/2016', '2016-01-22', '24x32', TRUE, 'public/img/Journée de la gentillesse.jpg', 1);
(`C'est le prinptemps`, 'élections départementales 2015', '2015-03-20', '24x32', TRUE, 'public/img/Journée de la gentillesse.jpg', 1);
('Fashion week', 'fashion week + cop21', '2015-12-12', '24x32', TRUE, 'public/img/Journée de la gentillesse.jpg', 1);
('Tourisme shebab', 'attaque Kenia 147 mort', '2015-04-02', '24x32', TRUE, 'public/img/Journée de la gentillesse.jpg', 1);
(`L'air du temps`, `Réforme de l'orthographe`, '2016-03-20', '24x32', TRUE, 'public/img/Journée de la gentillesse.jpg', 1);
('Le Carillon', 'Attentat de Paris', '2015-11-23', '21x29', TRUE, 'public/img/Journée de la gentillesse.jpg', 1);
('Germanwings', 'accident German airwings', NULL, '24x32', TRUE, 'public/img/Journée de la gentillesse.jpg', 1);






-- SQLBook: Code
-- Modèle physique de données (MPD)

BEGIN; -- Débute une transaction = si l'une des commandes échoue, elles échouent toutes !

-- Pour pouvoir relancer le script, on supprime les tables d'abord
DROP TABLE IF EXISTS "list", "card", "tag", "card_has_tag";

CREATE TABLE "list" (
  "id" INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  "title" VARCHAR(100) NOT NULL,
  "position" INTEGER DEFAULT 1,
  "created_at" TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
  "updated_at" TIMESTAMPTZ
);

CREATE TABLE "card" (
  "id" INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  "content" TEXT NOT NULL,
  "position" INTEGER NOT NULL DEFAULT 1,
  "color" VARCHAR(7),
  "list_id" INTEGER NOT NULL REFERENCES "list"("id") ON DELETE CASCADE,
  "created_at" TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
  "updated_at" TIMESTAMPTZ
);

-- REFERENCES "list"("id") ===> si une carte pointe vers une list qui n'existe pas, ça plante !
-- ON DELETE CASCADE       ===> si on supprime la liste, les cartes de la liste sont supprimées automatiquement
--                         ===> autre solution, ne PAS mettre ce ON DELETE CASCADE et à ce moment là, il faudra obligatoirement vider les cartes avant de supprimer les listes !

CREATE TABLE "tag" (
  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "name" VARCHAR(50) NOT NULL UNIQUE,
  "color" VARCHAR(7),
  "created_at" TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
  "updated_at" TIMESTAMPTZ
);

CREATE TABLE "card_has_tag" (
  "card_id" INTEGER NOT NULL REFERENCES "card"("id") ON DELETE CASCADE,
  "tag_id" INTEGER NOT NULL REFERENCES "tag"("id") ON DELETE CASCADE,

  PRIMARY KEY ("card_id", "tag_id"),

  "created_at" TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
  "updated_at" TIMESTAMPTZ
);

-- On aurait pu mettre un ID à cette table card_has_tag à la place, et mettre en unique le couple card_id et tag_id
-- UNIQUE ("card_id", "tag_id"), ==> on peut pas avoir deux fois le même tag sur la même cardes

-- Alternativement, on peut expliciter la contrainte de clé étrangère au niveau de la table :
-- "card_id" INTEGER NOT NULL ON DELETE CASCADE,
-- "tag_id" INTEGER NOT NULL ON DELETE CASCADE,
-- FOREIGN KEY ("card_id") REFERENCES "card"("id"),
-- FOREIGN KEY ("tag_id") REFERENCES "tag"("id"),


COMMIT; -- Fin de la transaction